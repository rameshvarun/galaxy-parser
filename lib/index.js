/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,14],$V2=[1,10],$V3=[2,40],$V4=[1,17],$V5=[4,13,14,33,44,76],$V6=[1,29],$V7=[1,30],$V8=[49,76],$V9=[2,87],$Va=[2,90],$Vb=[1,49],$Vc=[2,19],$Vd=[1,54],$Ve=[1,58],$Vf=[1,55],$Vg=[1,56],$Vh=[1,57],$Vi=[1,51],$Vj=[1,50],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,52],$Vo=[1,53],$Vp=[1,59],$Vq=[2,34],$Vr=[2,14],$Vs=[1,67],$Vt=[20,25,35,37,39,41,42,60,64,68,69,70,73,75,76],$Vu=[1,80],$Vv=[1,81],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,105],$VJ=[1,108],$VK=[1,112],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,107],$VP=[1,106],$VQ=[1,113],$VR=[10,18,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72],$VS=[2,47],$VT=[2,48],$VU=[2,49],$VV=[2,50],$VW=[2,51],$VX=[1,116],$VY=[1,123],$VZ=[1,126],$V_=[1,130],$V$=[1,127],$V01=[1,128],$V11=[1,129],$V21=[1,125],$V31=[1,124],$V41=[1,131],$V51=[1,134],$V61=[2,36],$V71=[2,37],$V81=[2,38],$V91=[2,35],$Va1=[2,21],$Vb1=[1,157],$Vc1=[1,160],$Vd1=[1,164],$Ve1=[1,161],$Vf1=[1,162],$Vg1=[1,163],$Vh1=[1,159],$Vi1=[1,158],$Vj1=[1,165],$Vk1=[20,35,37,39,41,42,60,64,76],$Vl1=[1,180],$Vm1=[1,181],$Vn1=[1,182],$Vo1=[1,183],$Vp1=[1,184],$Vq1=[1,185],$Vr1=[1,186],$Vs1=[1,187],$Vt1=[1,188],$Vu1=[1,189],$Vv1=[1,190],$Vw1=[1,191],$Vx1=[1,192],$Vy1=[1,193],$Vz1=[1,194],$VA1=[10,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63],$VB1=[1,207],$VC1=[2,23],$VD1=[1,210],$VE1=[1,214],$VF1=[1,211],$VG1=[1,212],$VH1=[1,213],$VI1=[1,209],$VJ1=[1,208],$VK1=[1,215],$VL1=[1,217],$VM1=[1,218],$VN1=[1,219],$VO1=[1,220],$VP1=[1,221],$VQ1=[1,222],$VR1=[1,223],$VS1=[1,224],$VT1=[1,225],$VU1=[1,226],$VV1=[1,227],$VW1=[1,228],$VX1=[1,229],$VY1=[1,230],$VZ1=[1,231],$V_1=[22,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63],$V$1=[10,18,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72],$V02=[2,69],$V12=[10,18,51,52,53,54,55,56,57,58,59,60,71,72],$V22=[2,70],$V32=[22,31],$V42=[2,53],$V52=[1,248],$V62=[1,249],$V72=[1,250],$V82=[1,251],$V92=[1,252],$Va2=[1,253],$Vb2=[1,254],$Vc2=[1,255],$Vd2=[1,256],$Ve2=[1,257],$Vf2=[1,258],$Vg2=[1,259],$Vh2=[1,260],$Vi2=[1,261],$Vj2=[1,262],$Vk2=[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$Vl2=[2,56],$Vm2=[10,18,51,52,71,72],$Vn2=[2,57],$Vo2=[2,58],$Vp2=[2,59],$Vq2=[2,60],$Vr2=[2,61],$Vs2=[2,62],$Vt2=[2,63],$Vu2=[2,64],$Vv2=[2,65],$Vw2=[2,66],$Vx2=[2,67],$Vy2=[2,68],$Vz2=[10,51,52,53,54,55,56,57,58,59,60,61,62,63],$VA2=[10,51,52,53,54,55,56,57,58,59,60],$VB2=[1,287],$VC2=[1,288],$VD2=[1,289],$VE2=[1,290],$VF2=[1,291],$VG2=[1,292],$VH2=[1,293],$VI2=[1,294],$VJ2=[1,295],$VK2=[1,296],$VL2=[1,297],$VM2=[1,298],$VN2=[1,299],$VO2=[1,300],$VP2=[1,301],$VQ2=[22,31,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63],$VR2=[2,55],$VS2=[22,51,52,53,54,55,56,57,58,59,60,61,62,63],$VT2=[22,51,52,53,54,55,56,57,58,59,60],$VU2=[25,76],$VV2=[10,23],$VW2=[2,54],$VX2=[50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VY2=[50,51,52,53,54,55,56,57,58,59,60],$VZ2=[10,51,52],$V_2=[2,52],$V$2=[22,31,51,52,53,54,55,56,57,58,59,60,61,62,63],$V03=[22,31,51,52,53,54,55,56,57,58,59,60],$V13=[22,51,52],$V23=[50,51,52],$V33=[22,31,51,52];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"EOF":4,"toplevel_declarations":5,"toplevel_declaration":6,"include":7,"struct_definition":8,"function_declaration":9,"SEMICOLON":10,"function_definition":11,"global_declaration":12,"STATIC":13,"CONST":14,"variable_declaration":15,"type_specifier":16,"identifier":17,"EQUALS":18,"expression":19,"LPAREN":20,"optional_formals":21,"RPAREN":22,"LBRACE":23,"optional_statements":24,"RBRACE":25,"statements":26,"formals":27,"optional_actuals":28,"actuals":29,"statement":30,"COMMA":31,"formal":32,"INCLUDE":33,"string_literal":34,"STRINGLITERAL":35,"fixed_literal":36,"FIXEDLITERAL":37,"integer_literal":38,"INTEGERLITERAL":39,"boolean_literal":40,"TRUE":41,"FALSE":42,"static_modifier":43,"STRUCT":44,"struct_fields":45,"const_modifier":46,"struct_field":47,"DOT":48,"LBRACKET":49,"RBRACKET":50,"OR":51,"AND":52,"NEQUALS":53,"DEQUALS":54,"LANGLE":55,"RANGLE":56,"LTEQ":57,"GTEQ":58,"PLUS":59,"MINUS":60,"MULT":61,"DIV":62,"MODULUS":63,"NOT":64,"if_statement":65,"while_statement":66,"assignop":67,"RETURN":68,"BREAK":69,"CONTINUE":70,"PLUSEQUALS":71,"MINUSEQUALS":72,"IF":73,"ELSE":74,"WHILE":75,"ID":76,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",10:"SEMICOLON",13:"STATIC",14:"CONST",18:"EQUALS",20:"LPAREN",22:"RPAREN",23:"LBRACE",25:"RBRACE",31:"COMMA",33:"INCLUDE",35:"STRINGLITERAL",37:"FIXEDLITERAL",39:"INTEGERLITERAL",41:"TRUE",42:"FALSE",44:"STRUCT",48:"DOT",49:"LBRACKET",50:"RBRACKET",51:"OR",52:"AND",53:"NEQUALS",54:"DEQUALS",55:"LANGLE",56:"RANGLE",57:"LTEQ",58:"GTEQ",59:"PLUS",60:"MINUS",61:"MULT",62:"DIV",63:"MODULUS",64:"NOT",68:"RETURN",69:"BREAK",70:"CONTINUE",71:"PLUSEQUALS",72:"MINUSEQUALS",73:"IF",74:"ELSE",75:"WHILE",76:"ID"},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[6,1],[6,1],[6,2],[6,1],[6,1],[12,4],[12,3],[12,3],[12,2],[15,2],[15,4],[9,6],[9,5],[11,4],[24,0],[24,1],[21,0],[21,1],[28,0],[28,1],[26,2],[26,1],[27,3],[27,1],[32,2],[29,3],[29,1],[7,2],[7,3],[34,1],[36,1],[38,1],[40,1],[40,1],[8,7],[43,0],[43,1],[46,0],[46,1],[45,2],[45,1],[47,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,4],[19,3],[19,4],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[30,2],[30,2],[30,1],[30,1],[30,4],[30,3],[30,2],[30,2],[30,2],[67,1],[67,1],[67,1],[65,7],[65,11],[65,9],[66,7],[16,1],[16,4],[16,4],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return ast.Program(range(this._$), []); 
break;
case 2:
 return ast.Program(range(this._$), $$[$0-1]); 
break;
case 3: case 26: case 28: case 31: case 45:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 10:
 this.$ = ast.GlobalDeclaration(range(this._$), true, true, $$[$0-1]); 
break;
case 11:
 this.$ = ast.GlobalDeclaration(range(this._$), true, false, $$[$0-1]); 
break;
case 12:
 this.$ = ast.GlobalDeclaration(range(this._$), false, true, $$[$0-1]); 
break;
case 13:
 this.$ = ast.GlobalDeclaration(range(this._$), false, false, $$[$0-1]); 
break;
case 14:
 this.$ = ast.VariableDeclaration(range(this._$), $$[$0-1], $$[$0], null); 
break;
case 15:
 this.$ = ast.VariableDeclaration(range(this._$), $$[$0-3], $$[$0-2], $$[$0]); 
break;
case 16:
 this.$ = ast.FunctionDeclaration(range(this._$), true, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 17:
 this.$ = ast.FunctionDeclaration(range(this._$), false, $$[$0-3], $$[$0-2], $$[$0]); 
break;
case 18:
 this.$ = ast.FunctionDefinition(range(this._$), $$[$0-3], $$[$0-1]); 
break;
case 19: case 21: case 23:
 this.$ = []; 
break;
case 25: case 44:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 27:
 this.$ = $$[$0-2].concat($$[$0-1]); 
break;
case 29:
 this.$ = ast.Formal(range(this._$), $$[$0-1], $$[$0]); 
break;
case 30:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 32:
 this.$ = ast.Include(range(this._$), $$[$0]); 
break;
case 33:
 this.$ = ast.Include(range(this._$), $$[$0-1]); 
break;
case 34:
 this.$ = ast.StringLiteral(range(_$[$0]), $$[$0]); 
break;
case 35:
 this.$ = ast.FixedLiteral(range(_$[$0]), $$[$0]); 
break;
case 36:
 this.$ = ast.IntegerLiteral(range(_$[$0]), parseInt($$[$0])); 
break;
case 37:
 this.$ = ast.BooleanLiteral(range(_$[$0]), true); 
break;
case 38:
 this.$ = ast.BooleanLiteral(range(_$[$0]), false); 
break;
case 39:
 this.$ = ast.StructDefinition(range(this._$), $$[$0-6], $$[$0-4], $$[$0-2]); 
break;
case 40: case 42:
 this.$ = false; 
break;
case 41: case 43:
 this.$ = true; 
break;
case 46:
 this.$ = ast.StructField(range(this._$), $$[$0-2], $$[$0-1]); 
break;
case 52:
 this.$ = ast.FunctionCall(range(this._$), $$[$0-3], $$[$0-1]); 
break;
case 53:
 this.$ = ast.PropertyAccess(range(this._$), $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = ast.ArrayAccess(range(this._$), $$[$0-3], $$[$0-1]); 
break;
case 55:
 this.$ = $$[$0-1]; 
break;
case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 65: case 67: case 68:
 this.$ = ast.BinaryOperation(range(this._$), $$[$0-1], $$[$0-2], $$[$0]); 
break;
case 64: case 66:
 this.$ = ast.BinaryOperation(range(this._$), $$[$0-2], $$[$0-2], $$[$0]); 
break;
case 69: case 70:
 this.$ = ast.UnaryOperation(range(this._$, $$[$0-1], $$[$0])); 
break;
case 72:
 this.$ = ast.ExpressionStatement(range(this._$), $$[$0-1]); 
break;
case 75:
 this.$ = ast.AssignmentStatment(range(this._$), $$[$0-2], $$[$0-3], $$[$0-1]); 
break;
case 76:
 this.$ = ast.ReturnStatment(range(this._$), $$[$0-1]); 
break;
case 77:
 this.$ = ast.ReturnStatment(range(this._$), null); 
break;
case 78:
 this.$ = ast.BreakStatment(range(this._$)); 
break;
case 79:
 this.$ = ast.ContinueStatement(range(this._$)); 
break;
case 83:
 this.$ = ast.IfStatement(range(this._$), $$[$0-4], $$[$0-1], null); 
break;
case 84:
 this.$ = ast.IfStatement(range(this._$), $$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 85:
 this.$ = ast.IfStatement(range(this._$), $$[$0-6], $$[$0-3], [$$[$0]]); 
break;
case 86:
 this.$ = ast.WhileStatment(range(this._$), $$[$0-4], $$[$0-1]); 
break;
case 87:
 this.$ = ast.TypeSpecifier(range(this._$), $$[$0]); 
break;
case 88: case 89:
 this.$ = ast.ArrayType(range(this._$), $$[$0-3], $$[$0-1]); 
break;
case 90:
 this.$ = ast.Identifier(range(this._$), $$[$0]); 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,11:8,12:9,13:$V0,14:$V1,15:15,16:13,17:16,33:$V2,43:11,44:$V3,76:$V4},{1:[3]},{1:[2,1]},{4:[1,18],6:19,7:5,8:6,9:7,11:8,12:9,13:$V0,14:$V1,15:15,16:13,17:16,33:$V2,43:11,44:$V3,76:$V4},o($V5,[2,3]),o($V5,[2,5]),o($V5,[2,6]),{10:[1,20],23:[1,21]},o($V5,[2,8]),o($V5,[2,9]),{34:22,35:[1,23]},{44:[1,24]},{14:[1,26],15:27,16:25,17:16,44:[2,41],76:$V4},{17:28,49:$V6,76:$V7},{15:31,16:32,17:16,76:$V4},{10:[1,33]},o($V8,$V9),o($V8,$Va),{1:[2,2]},o($V5,[2,4]),o($V5,[2,7]),{15:37,16:32,17:48,19:38,20:$Vb,24:34,25:$Vc,26:35,30:36,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,65:39,66:40,68:$Vk,69:$Vl,70:$Vm,73:$Vn,75:$Vo,76:$Vp},o($V5,[2,32],{10:[1,60]}),o([4,10,13,14,33,44,76],$Vq),{17:61,76:[1,62]},{17:63,49:$V6,76:$V7},{15:64,16:32,17:16,76:$V4},{10:[1,65]},{10:$Vr,18:$Vs,20:[1,66]},{17:68,38:69,39:[1,71],76:[1,70]},o([10,18,20],$Va),{10:[1,72]},{17:73,49:$V6,76:[1,74]},o($V5,[2,13]),{25:[1,75]},{15:37,16:32,17:48,19:38,20:$Vb,25:[2,20],30:76,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,65:39,66:40,68:$Vk,69:$Vl,70:$Vm,73:$Vn,75:$Vo,76:$Vp},o($Vt,[2,26]),{10:[1,77]},{10:[1,78],18:[1,95],48:$Vu,49:$Vv,51:[1,82],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,67:79,71:[1,96],72:[1,97]},o($Vt,[2,73]),o($Vt,[2,74]),{10:[1,99],17:104,19:98,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{10:[1,114]},{10:[1,115]},o($VR,$VS),o($VR,$VT),o($VR,$VU),o($VR,$VV),o($VR,$VW,{20:$VX,76:$V9}),{17:122,19:117,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:133,19:132,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:135,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{20:[1,136]},{20:[1,137]},o($VR,$Vq),o($VR,$V61),o($VR,$V71),o($VR,$V81),o($VR,$V91),o([10,18,20,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,76],$Va),o($V5,[2,33]),{23:[1,138]},{23:$Va},{10:$Vr,18:$Vs,20:[1,139]},{10:[1,140]},o($V5,[2,11]),{16:144,17:16,21:141,22:$Va1,27:142,32:143,76:$V4},{17:104,19:145,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{50:[1,146]},{50:[1,147]},{50:$Va},{50:$V61},o($V5,[2,12]),{10:$Vr,18:$Vs},o([10,18],$Va),o($V5,[2,18]),o($Vt,[2,25]),o($Vt,[2,71]),o($Vt,[2,72]),{17:104,19:148,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:149,76:[1,150]},{17:156,19:151,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:133,19:166,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:167,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:168,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:169,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:170,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:171,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:172,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:173,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:174,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:175,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:176,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:177,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},{17:133,19:178,20:$Vb,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,76:$V51},o($Vk1,[2,80]),o($Vk1,[2,81]),o($Vk1,[2,82]),{10:[1,179],48:$Vl1,49:$Vm1,51:$Vn1,52:$Vo1,53:$Vp1,54:$Vq1,55:$Vr1,56:$Vs1,57:$Vt1,58:$Vu1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1},o($Vt,[2,77]),o($VA1,$VS),o($VA1,$VT),o($VA1,$VU),o($VA1,$VV),o($VA1,$VW,{20:[1,195]}),{17:122,19:196,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:104,19:197,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:198,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},o($VA1,$Vq),o($VA1,$V61),o($VA1,$V71),o($VA1,$V81),o($VA1,$V91),o([10,20,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63],$Va),o($Vt,[2,78]),o($Vt,[2,79]),{17:206,19:201,20:$VB1,22:$VC1,28:199,29:200,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{22:[1,216],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},o($V_1,$VS),o($V_1,$VT),o($V_1,$VU),o($V_1,$VV),o($V_1,$VW,{20:[1,232]}),{17:122,19:233,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:234,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:235,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},o($V_1,$Vq),o($V_1,$V61),o($V_1,$V71),o($V_1,$V81),o($V_1,$V91),o([20,22,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63],$Va),o($V$1,$V02,{48:$Vu,49:$Vv}),o($VR,$VW,{20:$VX}),o([10,18,20,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72],$Va),o($V12,$V22,{48:$Vu,49:$Vv,61:$VF,62:$VG,63:$VH}),{17:122,19:236,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:237,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{16:240,17:16,45:238,47:239,76:$V4},{16:144,17:16,21:241,22:$Va1,27:142,32:143,76:$V4},o($V5,[2,10]),{22:[1,242]},{22:[2,22],31:[1,243]},o($V32,[2,28]),{17:244,49:$V6,76:[1,245]},{10:[2,15],48:$Vl1,49:$Vm1,51:$Vn1,52:$Vo1,53:$Vp1,54:$Vq1,55:$Vr1,56:$Vs1,57:$Vt1,58:$Vu1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1},o($V8,[2,88]),o($V8,[2,89]),{10:[1,246],48:$Vl1,49:$Vm1,51:$Vn1,52:$Vo1,53:$Vp1,54:$Vq1,55:$Vr1,56:$Vs1,57:$Vt1,58:$Vu1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1},o($VR,$V42),o($VR,$Va),{48:$V52,49:$V62,50:[1,247],51:$V72,52:$V82,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2},o($Vk2,$VS),o($Vk2,$VT),o($Vk2,$VU),o($Vk2,$VV),o($Vk2,$VW,{20:[1,263]}),{17:122,19:264,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:156,19:265,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:266,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},o($Vk2,$Vq),o($Vk2,$V61),o($Vk2,$V71),o($Vk2,$V81),o($Vk2,$V91),o([20,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$Va),o([10,18,51,71,72],$Vl2,{48:$Vu,49:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vn2,{48:$Vu,49:$Vv,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vo2,{48:$Vu,49:$Vv,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vp2,{48:$Vu,49:$Vv,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vq2,{48:$Vu,49:$Vv,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vr2,{48:$Vu,49:$Vv,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vs2,{48:$Vu,49:$Vv,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($Vm2,$Vt2,{48:$Vu,49:$Vv,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V12,$Vu2,{48:$Vu,49:$Vv,61:$VF,62:$VG,63:$VH}),o($V12,$Vv2,{48:$Vu,49:$Vv,61:$VF,62:$VG,63:$VH}),o($V$1,$Vw2,{48:$Vu,49:$Vv}),o($V$1,$Vx2,{48:$Vu,49:$Vv}),o($V$1,$Vy2,{48:$Vu,49:$Vv}),o($Vt,[2,76]),{17:267,76:[1,268]},{17:156,19:269,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:104,19:270,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:271,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:272,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:273,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:274,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:275,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:276,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:277,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:278,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:279,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:280,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:281,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:104,19:282,20:$VI,34:100,35:$VJ,36:103,37:$VK,38:101,39:$VL,40:102,41:$VM,42:$VN,60:$VO,64:$VP,76:$VQ},{17:206,19:201,20:$VB1,22:$VC1,28:283,29:200,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{22:[1,284],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},o($Vz2,$V02,{48:$Vl1,49:$Vm1}),o($VA2,$V22,{48:$Vl1,49:$Vm1,61:$Vx1,62:$Vy1,63:$Vz1}),{22:[1,285]},{22:[2,24],31:[1,286]},o($V32,[2,31],{48:$VB2,49:$VC2,51:$VD2,52:$VE2,53:$VF2,54:$VG2,55:$VH2,56:$VI2,57:$VJ2,58:$VK2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($VQ2,$VS),o($VQ2,$VT),o($VQ2,$VU),o($VQ2,$VV),o($VQ2,$VW,{20:[1,302]}),{17:122,19:303,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:206,19:304,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:305,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},o($VQ2,$Vq),o($VQ2,$V61),o($VQ2,$V71),o($VQ2,$V81),o($VQ2,$V91),o([20,22,31,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63],$Va),o($VR,$VR2),{17:306,76:[1,307]},{17:156,19:308,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:122,19:309,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:310,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:311,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:312,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:313,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:314,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:315,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:316,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:317,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:318,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:319,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:320,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:122,19:321,20:$VY,34:118,35:$VZ,36:121,37:$V_,38:119,39:$V$,40:120,41:$V01,42:$V11,60:$V21,64:$V31,76:$V41},{17:206,19:201,20:$VB1,22:$VC1,28:322,29:200,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{22:[1,323],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},o($VS2,$V02,{48:$VL1,49:$VM1}),o($VT2,$V22,{48:$VL1,49:$VM1,61:$VX1,62:$VY1,63:$VZ1}),{22:[1,324],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},{22:[1,325],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},{16:240,17:16,25:[1,326],47:327,76:$V4},o($VU2,[2,45]),{17:328,49:$V6,76:[1,329]},{22:[1,330]},o($VV2,[2,17]),{16:144,17:16,32:331,76:$V4},o($V32,[2,29]),o($V32,$Va),o($Vt,[2,75]),o($VR,$VW2),{17:332,76:[1,333]},{17:156,19:334,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:335,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:336,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:337,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:338,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:339,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:340,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:341,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:342,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:343,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:344,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:345,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:346,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:156,19:347,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:206,19:201,20:$VB1,22:$VC1,28:348,29:200,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{22:[1,349],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},o($VX2,$V02,{48:$V52,49:$V62}),o($VY2,$V22,{48:$V52,49:$V62,61:$Vh2,62:$Vi2,63:$Vj2}),o($VA1,$V42),o($VA1,$Va),{48:$V52,49:$V62,50:[1,350],51:$V72,52:$V82,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2},o([10,51],$Vl2,{48:$Vl1,49:$Vm1,52:$Vo1,53:$Vp1,54:$Vq1,55:$Vr1,56:$Vs1,57:$Vt1,58:$Vu1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vn2,{48:$Vl1,49:$Vm1,53:$Vp1,54:$Vq1,55:$Vr1,56:$Vs1,57:$Vt1,58:$Vu1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vo2,{48:$Vl1,49:$Vm1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vp2,{48:$Vl1,49:$Vm1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vq2,{48:$Vl1,49:$Vm1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vr2,{48:$Vl1,49:$Vm1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vs2,{48:$Vl1,49:$Vm1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VZ2,$Vt2,{48:$Vl1,49:$Vm1,59:$Vv1,60:$Vw1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VA2,$Vu2,{48:$Vl1,49:$Vm1,61:$Vx1,62:$Vy1,63:$Vz1}),o($VA2,$Vv2,{48:$Vl1,49:$Vm1,61:$Vx1,62:$Vy1,63:$Vz1}),o($Vz2,$Vw2,{48:$Vl1,49:$Vm1}),o($Vz2,$Vx2,{48:$Vl1,49:$Vm1}),o($Vz2,$Vy2,{48:$Vl1,49:$Vm1}),{22:[1,351]},o($VA1,$VR2),o($VR,$V_2),{17:206,19:352,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:353,76:[1,354]},{17:156,19:355,20:$Vb1,34:152,35:$Vc1,36:155,37:$Vd1,38:153,39:$Ve1,40:154,41:$Vf1,42:$Vg1,60:$Vh1,64:$Vi1,76:$Vj1},{17:206,19:356,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:357,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:358,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:359,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:360,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:361,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:362,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:363,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:364,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:365,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:366,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:367,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:368,20:$VB1,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{17:206,19:201,20:$VB1,22:$VC1,28:369,29:200,34:202,35:$VD1,36:205,37:$VE1,38:203,39:$VF1,40:204,41:$VG1,42:$VH1,60:$VI1,64:$VJ1,76:$VK1},{22:[1,370],48:$VL1,49:$VM1,51:$VN1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1},o($V$2,$V02,{48:$VB2,49:$VC2}),o($V03,$V22,{48:$VB2,49:$VC2,61:$VN2,62:$VO2,63:$VP2}),o($V_1,$V42),o($V_1,$Va),{48:$V52,49:$V62,50:[1,371],51:$V72,52:$V82,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2},o([22,51],$Vl2,{48:$VL1,49:$VM1,52:$VO1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vn2,{48:$VL1,49:$VM1,53:$VP1,54:$VQ1,55:$VR1,56:$VS1,57:$VT1,58:$VU1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vo2,{48:$VL1,49:$VM1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vp2,{48:$VL1,49:$VM1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vq2,{48:$VL1,49:$VM1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vr2,{48:$VL1,49:$VM1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vs2,{48:$VL1,49:$VM1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($V13,$Vt2,{48:$VL1,49:$VM1,59:$VV1,60:$VW1,61:$VX1,62:$VY1,63:$VZ1}),o($VT2,$Vu2,{48:$VL1,49:$VM1,61:$VX1,62:$VY1,63:$VZ1}),o($VT2,$Vv2,{48:$VL1,49:$VM1,61:$VX1,62:$VY1,63:$VZ1}),o($VS2,$Vw2,{48:$VL1,49:$VM1}),o($VS2,$Vx2,{48:$VL1,49:$VM1}),o($VS2,$Vy2,{48:$VL1,49:$VM1}),{22:[1,372]},o($V_1,$VR2),{23:[1,373]},{23:[1,374]},{10:[1,375]},o($VU2,[2,44]),{10:[1,376]},{10:$Va},o($VV2,[2,16]),o($V32,[2,27]),o($Vk2,$V42),o($Vk2,$Va),{48:$V52,49:$V62,50:[1,377],51:$V72,52:$V82,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2},o([50,51],$Vl2,{48:$V52,49:$V62,52:$V82,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vn2,{48:$V52,49:$V62,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vo2,{48:$V52,49:$V62,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vp2,{48:$V52,49:$V62,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vq2,{48:$V52,49:$V62,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vr2,{48:$V52,49:$V62,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vs2,{48:$V52,49:$V62,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($V23,$Vt2,{48:$V52,49:$V62,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2}),o($VY2,$Vu2,{48:$V52,49:$V62,61:$Vh2,62:$Vi2,63:$Vj2}),o($VY2,$Vv2,{48:$V52,49:$V62,61:$Vh2,62:$Vi2,63:$Vj2}),o($VX2,$Vw2,{48:$V52,49:$V62}),o($VX2,$Vx2,{48:$V52,49:$V62}),o($VX2,$Vy2,{48:$V52,49:$V62}),{22:[1,378]},o($Vk2,$VR2),o($VA1,$VW2),o($VA1,$V_2),o($V32,[2,30],{48:$VB2,49:$VC2,51:$VD2,52:$VE2,53:$VF2,54:$VG2,55:$VH2,56:$VI2,57:$VJ2,58:$VK2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($VQ2,$V42),o($VQ2,$Va),{48:$V52,49:$V62,50:[1,379],51:$V72,52:$V82,53:$V92,54:$Va2,55:$Vb2,56:$Vc2,57:$Vd2,58:$Ve2,59:$Vf2,60:$Vg2,61:$Vh2,62:$Vi2,63:$Vj2},o([22,31,51],$Vl2,{48:$VB2,49:$VC2,52:$VE2,53:$VF2,54:$VG2,55:$VH2,56:$VI2,57:$VJ2,58:$VK2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vn2,{48:$VB2,49:$VC2,53:$VF2,54:$VG2,55:$VH2,56:$VI2,57:$VJ2,58:$VK2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vo2,{48:$VB2,49:$VC2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vp2,{48:$VB2,49:$VC2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vq2,{48:$VB2,49:$VC2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vr2,{48:$VB2,49:$VC2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vs2,{48:$VB2,49:$VC2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V33,$Vt2,{48:$VB2,49:$VC2,59:$VL2,60:$VM2,61:$VN2,62:$VO2,63:$VP2}),o($V03,$Vu2,{48:$VB2,49:$VC2,61:$VN2,62:$VO2,63:$VP2}),o($V03,$Vv2,{48:$VB2,49:$VC2,61:$VN2,62:$VO2,63:$VP2}),o($V$2,$Vw2,{48:$VB2,49:$VC2}),o($V$2,$Vx2,{48:$VB2,49:$VC2}),o($V$2,$Vy2,{48:$VB2,49:$VC2}),{22:[1,380]},o($VQ2,$VR2),o($V_1,$VW2),o($V_1,$V_2),{15:37,16:32,17:48,19:38,20:$Vb,24:381,25:$Vc,26:35,30:36,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,65:39,66:40,68:$Vk,69:$Vl,70:$Vm,73:$Vn,75:$Vo,76:$Vp},{15:37,16:32,17:48,19:38,20:$Vb,24:382,25:$Vc,26:35,30:36,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,65:39,66:40,68:$Vk,69:$Vl,70:$Vm,73:$Vn,75:$Vo,76:$Vp},o($V5,[2,39]),o($VU2,[2,46]),o($Vk2,$VW2),o($Vk2,$V_2),o($VQ2,$VW2),o($VQ2,$V_2),{25:[1,383]},{25:[1,384]},o($Vt,[2,83],{74:[1,385]}),o($Vt,[2,86]),{23:[1,386],65:387,73:$Vn},{15:37,16:32,17:48,19:38,20:$Vb,24:388,25:$Vc,26:35,30:36,34:44,35:$Vd,36:47,37:$Ve,38:45,39:$Vf,40:46,41:$Vg,42:$Vh,60:$Vi,64:$Vj,65:39,66:40,68:$Vk,69:$Vl,70:$Vm,73:$Vn,75:$Vo,76:$Vp},o($Vt,[2,85]),{25:[1,389]},o($Vt,[2,84])],
defaultActions: {2:[2,1],18:[2,2],62:[2,90],70:[2,90],71:[2,36],329:[2,90]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require('./ast');
var range = require('./range').fromJison;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 37; 
break;
case 1: return 39; 
break;
case 2: literal = ''; this.begin('STRING'); 
break;
case 3: literal += yy_.yytext[1]; 
break;
case 4: this.popState(); yy_.yytext = literal; return 35; 
break;
case 5: literal += yy_.yytext; 
break;
case 6: this.begin('COMMENT'); 
break;
case 7: this.popState(); 
break;
case 8: this.popState(); 
break;
case 9: /* eat all non-newline characters */ 
break;
case 10: return 73; 
break;
case 11: return 74; 
break;
case 12: return 75; 
break;
case 13: return 'FOR'; 
break;
case 14: return 33; 
break;
case 15: return 41; 
break;
case 16: return 42; 
break;
case 17: return 44; 
break;
case 18: return 13; 
break;
case 19: return 14; 
break;
case 20: return 70; 
break;
case 21: return 69; 
break;
case 22: return 68; 
break;
case 23:return 76; 
break;
case 24: return 'LSHIFT'; 
break;
case 25: return 'RSHIFT'; 
break;
case 26: return 52; 
break;
case 27: return 51; 
break;
case 28: return 53; 
break;
case 29: return 54; 
break;
case 30: return 57; 
break;
case 31: return 58; 
break;
case 32: return 18; 
break;
case 33: return 71; 
break;
case 34: return 72; 
break;
case 35: return 59; 
break;
case 36: return 60; 
break;
case 37: return 61; 
break;
case 38: return 62; 
break;
case 39: return 63; 
break;
case 40: return 64; 
break;
case 41: return 20; 
break;
case 42: return 22; 
break;
case 43: return 55; 
break;
case 44: return 56; 
break;
case 45: return 23; 
break;
case 46: return 25; 
break;
case 47: return 49; 
break;
case 48: return 50; 
break;
case 49: return 10; 
break;
case 50: return 31; 
break;
case 51: return 48; 
break;
case 52: /* skip whitespace */
break;
case 53: return 4; 
break;
}
},
rules: [/^(?:([0-9])+\.([0-9])+)/,/^(?:([0-9])+)/,/^(?:")/,/^(?:\\.)/,/^(?:")/,/^(?:.)/,/^(?:\/\/)/,/^(?:$)/,/^(?:[\n])/,/^(?:[^\n])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:static\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:<<)/,/^(?:>>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:\s+)/,/^(?:$)/],
conditions: {"COMMENT":{"rules":[7,8,9],"inclusive":false},"STRING":{"rules":[3,4,5],"inclusive":false},"INITIAL":{"rules":[0,1,2,6,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}